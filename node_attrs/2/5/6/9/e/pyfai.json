{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  },
  "test": "native_and_emulated"
 },
 "feedstock_name": "pyfai",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "name": "pyfai-base",
 "osx_64_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools <60.0.0",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyfai",
   "pyfai-base"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "linux_ppc64le",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/pyfai.json"
 },
 "raw_meta_yaml": "{% set name = \"pyfai\" %}\n{% set version = \"2023.9.0\" %}\n{% set sha256 = \"027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b\" %}\n\npackage:\n  name: {{ name|lower }}-base\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [py2k and win]\n  entry_points:\n    - check_calib = pyFAI.app.check_calib:main\n    - detector2nexus = pyFAI.app.detector2nexus:main\n    - diff_map = pyFAI.app.diff_map:main\n    - diff_tomo = pyFAI.app.diff_tomo:main\n    - eiger-mask = pyFAI.app.eiger_mask:main\n    - MX-calibrate = pyFAI.app.mx_calibrate:main\n    - pyFAI-average = pyFAI.app.average:main\n    - pyFAI-benchmark = pyFAI.app.benchmark:main\n    - pyFAI-calib = pyFAI.app.calib:main\n    - pyFAI-calib2 = pyFAI.app.calib2:main\n    - pyFAI-drawmask = pyFAI.app.drawmask:main\n    - pyFAI-integrate = pyFAI.app.integrate:main\n    - pyFAI-recalib = pyFAI.app.recalib:main\n    - pyFAI-saxs = pyFAI.app.saxs:main\n    - pyFAI-waxs = pyFAI.app.waxs:main\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n\n  host:\n    - python\n    - setuptools <60.0.0  # [osx]\n    - meson-python   # [not osx]\n    - numpy\n    - cython\n    - pip\n\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - fabio\n    - matplotlib-base\n    - scipy\n    - numexpr\n    - h5py\n    - silx-base\n\ntest:\n  imports:\n    - pyFAI\n    - pyFAI.test\n    - pyFAI.third_party\n# Bring these back when CDT/yum stuff is done\n#  commands:\n#    - pyFAI-calib -h\n\noutputs:\n  - name: pyfai-base\n\n  - name: pyfai\n    build:\n      noarch: generic\n    requirements:\n      run:\n        - {{ pin_subpackage('pyfai-base', max_pin=\"x.x.x.x\") }}\n        - matplotlib\n        - silx\n        - hdf5plugin\n\nabout:\n  home: https://github.com/silx-kit/pyFAI/\n  license: MIT\n  license_family: MIT\n  license_file: copyright\n  summary: Python implementation of fast azimuthal integration\n\n  description: |\n    pyFAI is an azimuthal integration library that tries to be fast (as fast\n    as C and even more using OpenCL and GPU). It is based on histogramming of\n    the 2theta/Q positions of each (center of) pixel weighted by the intensity\n    of each pixel, but parallel version uses a SparseMatrix-DenseVector\n    multiplication. Neighboring output bins get also a contribution of pixels\n    next to the border thanks to pixel splitting. Finally pyFAI provides also\n    tools to calibrate the experimental setup using Debye-Scherrer rings of a\n    reference compound.\n  doc_url: http://www.silx.org/doc/pyFAI/latest/\n  dev_url: https://github.com/silx-kit/pyFAI/\n\nextra:\n  recipe-maintainers:\n    - CJ-Wright\n    - tacaswell\n    - chiahaoliu\n    - tschoonj\n    - kif\n    - t20100\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "fabio",
   "h5py",
   "hdf5plugin",
   "matplotlib",
   "matplotlib-base",
   "meson-python",
   "numexpr",
   "numpy",
   "pip",
   "pyfai-base",
   "python",
   "scipy",
   "setuptools",
   "silx",
   "silx-base"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python",
    "setuptools <60.0.0"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz",
 "version": "2023.9.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/pyfai.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url": "https://github.com/silx-kit/pyFAI/",
   "doc_url": "http://www.silx.org/doc/pyFAI/latest/",
   "home": "https://github.com/silx-kit/pyFAI/",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "copyright",
   "summary": "Python implementation of fast azimuthal integration"
  },
  "build": {
   "entry_points": [
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100",
    "CJ-Wright",
    "tacaswell",
    "chiahaoliu",
    "tschoonj",
    "kif",
    "t20100"
   ]
  },
  "outputs": [
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   },
   {
    "name": "pyfai-base"
   },
   {
    "build": {
     "noarch": "generic"
    },
    "name": "pyfai",
    "requirements": {
     "run": [
      "pyfai-base",
      "matplotlib",
      "silx",
      "hdf5plugin"
     ]
    }
   }
  ],
  "package": {
   "name": "pyfai-base",
   "version": "2023.9.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip",
    "python",
    "meson-python",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base",
    "python",
    "numpy",
    "fabio",
    "matplotlib-base",
    "scipy",
    "numexpr",
    "h5py",
    "silx-base"
   ]
  },
  "source": {
   "sha256": "027c24622d4c55a00f17b796b6891560f7eb6b6d92b0e3877c97f65485ec1f3b",
   "url": "https://pypi.io/packages/source/p/pyfai/pyfai-2023.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "meson-python",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fabio",
    "h5py",
    "hdf5plugin",
    "matplotlib",
    "matplotlib-base",
    "numexpr",
    "numpy",
    "pyfai-base",
    "python",
    "scipy",
    "silx",
    "silx-base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}