{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "python-can",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The **C**\\ ontroller **A**\\ rea **N**\\ etwork is a bus standard designed\nto allow microcontrollers and devices to communicate with each other. It\nhas priority based bus arbitration and reliable deterministic\ncommunication. It is used in cars, trucks, boats, wheelchairs and more.\n\nThe ``can`` package provides controller area network support for\nPython developers; providing common abstractions to\ndifferent hardware devices, and a suite of utilities for sending and receiving\nmessages on a can bus.\n\nThe library currently supports CPython as well as PyPy and runs on Mac, Linux and Windows.\n\n==============================  ===========\nLibrary Version                 Python\n------------------------------  -----------\n  2.x                           2.6+, 3.4+\n  3.x                           2.7+, 3.5+\n  4.x *(currently on develop)*  3.7+\n==============================  ===========\n\n\nFeatures\n--------\n\n- common abstractions for CAN communication\n- support for many different backends (see the `docs <https://python-can.readthedocs.io/en/stable/interfaces.html>`__)\n- receiving, sending, and periodically sending messages\n- normal and extended arbitration IDs\n- `CAN FD <https://en.wikipedia.org/wiki/CAN_FD>`__ support\n- many different loggers and readers supporting playback: ASC (CANalyzer format), BLF (Binary Logging Format by Vector), CSV, SQLite and Canutils log\n- efficient in-kernel or in-hardware filtering of messages on supported interfaces\n- bus configuration reading from a file or from environment variables\n- command line tools for working with CAN buses (see the `docs <https://python-can.readthedocs.io/en/stable/scripts.html>`__)\n- more\n",
   "dev_url": "https://github.com/hardbyte/python-can",
   "doc_url": "https://python-can.readthedocs.org/en/stable/",
   "home": "https://github.com/hardbyte/python-can",
   "license": "LGPL-3.0-only",
   "license_family": "LGPL",
   "license_file": "LICENSE.txt",
   "summary": "The can package provides controller area network support for Python developers "
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "hardbyte",
    "danielhrisca"
   ]
  },
  "package": {
   "name": "python-can",
   "version": "4.2.2"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "pip",
    "setuptools"
   ],
   "run": [
    "packaging",
    "python >=3.7",
    "pyserial",
    "pywin32",
    "setuptools",
    "typing",
    "typing_extensions >=3.10.0.0",
    "wrapt"
   ]
  },
  "source": {
   "fn": "python-can-4.2.2.tar.gz",
   "sha256": "6ad50f4613289f3c4d276b6d2ac8901d776dcb929994cce93f55a69e858c595f",
   "url": "https://pypi.io/packages/source/p/python-can/python-can-4.2.2.tar.gz"
  },
  "test": {
   "imports": [
    "can",
    "can.interfaces",
    "can.interfaces.serial",
    "can.interfaces.socketcan",
    "can.interfaces.socketcand",
    "can.interfaces.udp_multicast",
    "can.io"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "packaging",
    "pyserial",
    "python",
    "pywin32",
    "setuptools",
    "typing",
    "typing_extensions",
    "wrapt"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The **C**\\ ontroller **A**\\ rea **N**\\ etwork is a bus standard designed\nto allow microcontrollers and devices to communicate with each other. It\nhas priority based bus arbitration and reliable deterministic\ncommunication. It is used in cars, trucks, boats, wheelchairs and more.\n\nThe ``can`` package provides controller area network support for\nPython developers; providing common abstractions to\ndifferent hardware devices, and a suite of utilities for sending and receiving\nmessages on a can bus.\n\nThe library currently supports CPython as well as PyPy and runs on Mac, Linux and Windows.\n\n==============================  ===========\nLibrary Version                 Python\n------------------------------  -----------\n  2.x                           2.6+, 3.4+\n  3.x                           2.7+, 3.5+\n  4.x *(currently on develop)*  3.7+\n==============================  ===========\n\n\nFeatures\n--------\n\n- common abstractions for CAN communication\n- support for many different backends (see the `docs <https://python-can.readthedocs.io/en/stable/interfaces.html>`__)\n- receiving, sending, and periodically sending messages\n- normal and extended arbitration IDs\n- `CAN FD <https://en.wikipedia.org/wiki/CAN_FD>`__ support\n- many different loggers and readers supporting playback: ASC (CANalyzer format), BLF (Binary Logging Format by Vector), CSV, SQLite and Canutils log\n- efficient in-kernel or in-hardware filtering of messages on supported interfaces\n- bus configuration reading from a file or from environment variables\n- command line tools for working with CAN buses (see the `docs <https://python-can.readthedocs.io/en/stable/scripts.html>`__)\n- more\n",
   "dev_url": "https://github.com/hardbyte/python-can",
   "doc_url": "https://python-can.readthedocs.org/en/stable/",
   "home": "https://github.com/hardbyte/python-can",
   "license": "LGPL-3.0-only",
   "license_family": "LGPL",
   "license_file": "LICENSE.txt",
   "summary": "The can package provides controller area network support for Python developers "
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "hardbyte",
    "danielhrisca"
   ]
  },
  "package": {
   "name": "python-can",
   "version": "4.2.2"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "pip",
    "setuptools"
   ],
   "run": [
    "packaging",
    "python >=3.7",
    "pyserial",
    "pywin32",
    "setuptools",
    "typing",
    "typing_extensions >=3.10.0.0",
    "wrapt"
   ]
  },
  "source": {
   "fn": "python-can-4.2.2.tar.gz",
   "sha256": "6ad50f4613289f3c4d276b6d2ac8901d776dcb929994cce93f55a69e858c595f",
   "url": "https://pypi.io/packages/source/p/python-can/python-can-4.2.2.tar.gz"
  },
  "test": {
   "imports": [
    "can",
    "can.interfaces",
    "can.interfaces.serial",
    "can.interfaces.socketcan",
    "can.interfaces.socketcand",
    "can.interfaces.udp_multicast",
    "can.io"
   ]
  }
 },
 "name": "python-can",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "python-can"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/python-can.json"
 },
 "raw_meta_yaml": "{% set name = \"python-can\" %}\n{% set version = \"4.2.2\" %}\n{% set sha256 = \"6ad50f4613289f3c4d276b6d2ac8901d776dcb929994cce93f55a69e858c595f\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python >=3.7\n    - pip\n    - setuptools\n  run:\n#    - msgpack  # [win]\n    - packaging\n    - python >=3.7\n    - pyserial\n    - pywin32\n    - setuptools\n    - typing\n    - typing_extensions >=3.10.0.0\n#    - windows-curses  # [win]\n    - wrapt\n\ntest:\n  imports:\n    - can\n    - can.interfaces\n#    - can.interfaces.etas\n#    - can.interfaces.ics_neovi\n#    - can.interfaces.ixxat\n#    - can.interfaces.kvaser\n#    - can.interfaces.neousys\n#    - can.interfaces.pcan\n#    - can.interfaces.seeedstudio\n    - can.interfaces.serial\n    - can.interfaces.socketcan\n    - can.interfaces.socketcand\n#    - can.interfaces.systec\n    - can.interfaces.udp_multicast\n#    - can.interfaces.usb2can\n#    - can.interfaces.vector\n    - can.io\n\nabout:\n  home: https://github.com/hardbyte/python-can\n  license: LGPL-3.0-only\n  license_family: LGPL\n  license_file: LICENSE.txt\n  summary: 'The can package provides controller area network support for Python developers '\n  description: |\n    The **C**\\ ontroller **A**\\ rea **N**\\ etwork is a bus standard designed\n    to allow microcontrollers and devices to communicate with each other. It\n    has priority based bus arbitration and reliable deterministic\n    communication. It is used in cars, trucks, boats, wheelchairs and more.\n\n    The ``can`` package provides controller area network support for\n    Python developers; providing common abstractions to\n    different hardware devices, and a suite of utilities for sending and receiving\n    messages on a can bus.\n\n    The library currently supports CPython as well as PyPy and runs on Mac, Linux and Windows.\n\n    ==============================  ===========\n    Library Version                 Python\n    ------------------------------  -----------\n      2.x                           2.6+, 3.4+\n      3.x                           2.7+, 3.5+\n      4.x *(currently on develop)*  3.7+\n    ==============================  ===========\n\n\n    Features\n    --------\n\n    - common abstractions for CAN communication\n    - support for many different backends (see the `docs <https://python-can.readthedocs.io/en/stable/interfaces.html>`__)\n    - receiving, sending, and periodically sending messages\n    - normal and extended arbitration IDs\n    - `CAN FD <https://en.wikipedia.org/wiki/CAN_FD>`__ support\n    - many different loggers and readers supporting playback: ASC (CANalyzer format), BLF (Binary Logging Format by Vector), CSV, SQLite and Canutils log\n    - efficient in-kernel or in-hardware filtering of messages on supported interfaces\n    - bus configuration reading from a file or from environment variables\n    - command line tools for working with CAN buses (see the `docs <https://python-can.readthedocs.io/en/stable/scripts.html>`__)\n    - more\n\n  doc_url: https://python-can.readthedocs.org/en/stable/\n  dev_url: https://github.com/hardbyte/python-can\n\nextra:\n  recipe-maintainers:\n    - hardbyte\n    - danielhrisca\n",
 "req": {
  "__set__": true,
  "elements": [
   "packaging",
   "pip",
   "pyserial",
   "python",
   "pywin32",
   "setuptools",
   "typing",
   "typing_extensions",
   "wrapt"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "packaging",
    "pyserial",
    "python",
    "pywin32",
    "setuptools",
    "typing",
    "typing_extensions",
    "wrapt"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.7",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "packaging",
    "pyserial",
    "python >=3.7",
    "pywin32",
    "setuptools",
    "typing",
    "typing_extensions >=3.10.0.0",
    "wrapt"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/p/python-can/python-can-4.2.2.tar.gz",
 "version": "4.2.2",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/python-can.json"
 }
}