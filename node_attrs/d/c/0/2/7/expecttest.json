{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "expecttest",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This library implements expect tests (also known as \"golden\" tests). Expect tests\nare a method of writing tests where instead of hard-coding the expected output of\na test, you run the test to get the output, and the test framework automatically\npopulates the expected output. If the output of the test changes, you can rerun the\ntest with the environment variable EXPECTTEST_ACCEPT=1 to automatically update the\nexpected output.\n",
   "home": "https://github.com/ezyang/expecttest",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Expect tests for unittest"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "ezyang",
    "pmeier"
   ]
  },
  "package": {
   "name": "expecttest",
   "version": "0.2.0"
  },
  "requirements": {
   "host": [
    "pip",
    "poetry",
    "python >=3.6,<4.0"
   ],
   "run": [
    "python >=3.6,<4.0"
   ]
  },
  "source": {
   "sha256": "0d79c41cb8f7ddb5e7be97427fdcc2741ad1c66c060f4949716cd40037a45e59",
   "url": "https://pypi.io/packages/source/e/expecttest/expecttest-0.2.0.tar.gz"
  },
  "test": {
   "imports": [
    "expecttest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This library implements expect tests (also known as \"golden\" tests). Expect tests\nare a method of writing tests where instead of hard-coding the expected output of\na test, you run the test to get the output, and the test framework automatically\npopulates the expected output. If the output of the test changes, you can rerun the\ntest with the environment variable EXPECTTEST_ACCEPT=1 to automatically update the\nexpected output.\n",
   "home": "https://github.com/ezyang/expecttest",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Expect tests for unittest"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "PYTHON -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "ezyang",
    "pmeier"
   ]
  },
  "package": {
   "name": "expecttest",
   "version": "0.2.0"
  },
  "requirements": {
   "host": [
    "pip",
    "poetry",
    "python >=3.6,<4.0"
   ],
   "run": [
    "python >=3.6,<4.0"
   ]
  },
  "source": {
   "sha256": "0d79c41cb8f7ddb5e7be97427fdcc2741ad1c66c060f4949716cd40037a45e59",
   "url": "https://pypi.io/packages/source/e/expecttest/expecttest-0.2.0.tar.gz"
  },
  "test": {
   "imports": [
    "expecttest"
   ]
  }
 },
 "name": "expecttest",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "expecttest"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/expecttest.json"
 },
 "raw_meta_yaml": "{% set name = \"expecttest\" %}\n{% set version = \"0.2.0\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/expecttest-{{ version }}.tar.gz\n  sha256: 0d79c41cb8f7ddb5e7be97427fdcc2741ad1c66c060f4949716cd40037a45e59\n\nbuild:\n  number: 0\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - poetry\n    - python >=3.6,<4.0\n  run:\n    - python >=3.6,<4.0\n\ntest:\n  imports:\n    - expecttest\n\nabout:\n  home: https://github.com/ezyang/expecttest\n  summary: Expect tests for unittest\n  description: |\n    This library implements expect tests (also known as \"golden\" tests). Expect tests\n    are a method of writing tests where instead of hard-coding the expected output of\n    a test, you run the test to get the output, and the test framework automatically\n    populates the expected output. If the output of the test changes, you can rerun the\n    test with the environment variable EXPECTTEST_ACCEPT=1 to automatically update the\n    expected output.\n  license: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - ezyang\n    - pmeier\n",
 "req": {
  "__set__": true,
  "elements": [
   "pip",
   "poetry",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python >=3.6,<4.0"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python >=3.6,<4.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/e/expecttest/expecttest-0.2.0.tar.gz",
 "version": "0.2.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/expecttest.json"
 }
}