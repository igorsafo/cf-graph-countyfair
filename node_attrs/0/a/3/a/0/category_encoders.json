{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "inspection": "hint-all"
  },
  "conda_build": {
   "pkg_format": "2"
  },
  "conda_forge_output_validation": true,
  "github": {
   "branch_name": "main",
   "tooling_branch_name": "main"
  }
 },
 "feedstock_name": "category_encoders",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url": "https://contrib.scikit-learn.org/category_encoders/",
   "home": "https://github.com/scikit-learn-contrib/category_encoders",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "dist/LICENSE.md",
   "summary": "A collection of sklearn transformers to encode categorical variables as numeric"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "cd dist && PYTHON -m pip install -vvv ."
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package": {
   "name": "category_encoders",
   "version": "2.6.3"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.7"
   ],
   "run": [
    "importlib-resources",
    "numpy >=1.14.0",
    "pandas >=1.0.5",
    "patsy >=0.5.1",
    "python >=3.7",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "d9f14705ed4b536eaf9cfc81b76d67a50b2f16f8f3eda498c57d7da19655530c",
    "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.6.3.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "efe91b537e7aa311fc3e6e7d61b553134fea4ba6b230da0d67d86ff5d5e7627e",
    "url": "https://github.com/scikit-learn-contrib/category_encoders/archive/2.6.3.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "pip check",
    "python -W ignore -m pytest src -vv --color=yes --tb=long --cov=category_encoders --cov-branch -k \"not (pandas_index or truncated_index)\" --cov-report=term-missing:skip-covered --no-cov-on-fail --cov-fail-under=89"
   ],
   "imports": [
    "category_encoders"
   ],
   "requires": [
    "cython",
    "pip",
    "pytest-cov"
   ],
   "source_files": [
    "src/tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-resources",
    "numpy",
    "pandas",
    "patsy",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest-cov"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url": "https://contrib.scikit-learn.org/category_encoders/",
   "home": "https://github.com/scikit-learn-contrib/category_encoders",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "dist/LICENSE.md",
   "summary": "A collection of sklearn transformers to encode categorical variables as numeric"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "cd dist && PYTHON -m pip install -vvv ."
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package": {
   "name": "category_encoders",
   "version": "2.6.3"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.7"
   ],
   "run": [
    "importlib-resources",
    "numpy >=1.14.0",
    "pandas >=1.0.5",
    "patsy >=0.5.1",
    "python >=3.7",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "d9f14705ed4b536eaf9cfc81b76d67a50b2f16f8f3eda498c57d7da19655530c",
    "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.6.3.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "efe91b537e7aa311fc3e6e7d61b553134fea4ba6b230da0d67d86ff5d5e7627e",
    "url": "https://github.com/scikit-learn-contrib/category_encoders/archive/2.6.3.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "pip check",
    "python -W ignore -m pytest src -vv --color=yes --tb=long --cov=category_encoders --cov-branch -k \"not (pandas_index or truncated_index)\" --cov-report=term-missing:skip-covered --no-cov-on-fail --cov-fail-under=89"
   ],
   "imports": [
    "category_encoders"
   ],
   "requires": [
    "cython",
    "pip",
    "pytest-cov"
   ],
   "source_files": [
    "src/tests"
   ]
  }
 },
 "name": "category_encoders",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "category_encoders"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/category_encoders.json"
 },
 "raw_meta_yaml": "{% set version = \"2.6.3\" %}\n\npackage:\n  name: category_encoders\n  version: {{ version }}\n\nsource:\n  - url: https://pypi.io/packages/source/c/category_encoders/category_encoders-{{ version }}.tar.gz\n    sha256: d9f14705ed4b536eaf9cfc81b76d67a50b2f16f8f3eda498c57d7da19655530c\n    folder: dist\n  - url: https://github.com/scikit-learn-contrib/category_encoders/archive/{{ version }}.tar.gz\n    sha256: efe91b537e7aa311fc3e6e7d61b553134fea4ba6b230da0d67d86ff5d5e7627e\n    folder: src\n\nbuild:\n  noarch: python\n  number: 0\n  script:\n    - cd dist && {{ PYTHON }} -m pip install -vvv .\n\nrequirements:\n  host:\n    - pip\n    - python >=3.7\n  run:\n    - importlib-resources\n    - numpy >=1.14.0\n    - pandas >=1.0.5\n    - patsy >=0.5.1\n    - python >=3.7\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n\ntest:\n  source_files:\n    - src/tests\n  requires:\n    - cython\n    - pip\n    - pytest-cov\n  imports:\n    - category_encoders\n  commands:\n    - pip check\n    - python -W ignore -m pytest src -vv --color=yes --tb=long --cov=category_encoders --cov-branch -k \"not (pandas_index or truncated_index)\" --cov-report=term-missing:skip-covered --no-cov-on-fail --cov-fail-under=89\n\nabout:\n  home: https://github.com/scikit-learn-contrib/category_encoders\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dist/LICENSE.md\n  summary: A collection of sklearn transformers to encode categorical variables as numeric\n  doc_url: https://contrib.scikit-learn.org/category_encoders/\n  description: |-\n    A set of scikit-learn-style transformers for encoding categorical variables\n    into numeric with different techniques. While ordinal, one-hot, and hashing\n    encoders have similar equivalents in the existing scikit-learn version, the\n    transformers in this library all share a few useful properties:\n\n    - First-class support for pandas dataframes as an input (and optionally as\n      output)\n\n    - Can explicitly configure which columns in the data are encoded by name or\n      index, or infer non-numeric columns regardless of input type\n\n    - Can drop any columns with very low variance based on training set\n      optionally\n\n    - Portability: train a transformer on data, pickle it, reuse it later and\n      get the same thing out.\n\n    - Full compatibility with sklearn pipelines, input an array-like dataset\n      like any other transformer\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nirajd\n    - wdm0006\n",
 "req": {
  "__set__": true,
  "elements": [
   "importlib-resources",
   "numpy",
   "pandas",
   "patsy",
   "pip",
   "python",
   "scikit-learn",
   "scipy",
   "statsmodels"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-resources",
    "numpy",
    "pandas",
    "patsy",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest-cov"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.7"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-resources",
    "numpy >=1.14.0",
    "pandas >=1.0.5",
    "patsy >=0.5.1",
    "python >=3.7",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest-cov"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.6.3.tar.gz",
 "version": "2.6.3",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/category_encoders.json"
 }
}